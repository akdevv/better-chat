generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  apiKeys       ApiKey[]
  chats         Chat[]
  sessions      Session[]
  userSettings  UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  title     String    @default("Untitled Chat")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isStarred Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([userId, isStarred])
  @@index([userId, createdAt])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      Role     @default(USER)
  content   String
  createdAt DateTime @default(now())
  model     String?
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model UserSettings {
  id          String @id @default(cuid())
  userId      String @unique
  preferences Json?
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id            String    @id @default(cuid())
  provider      Provider
  encryptedKey  String
  isValidated   Boolean   @default(false)
  lastValidated DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, provider])
  @@index([userId])
}

enum Provider {
  openai
  google
  anthropic
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}
